

-- Format of quote file.
format
 =      { symbol : Text         = 'Text
        , date   : Date         = 'YYYY-MM-DD
        , open   : Decimal      = 'Decimal
        , close  : Decimal      = 'Decimal
        , high   : Decimal      = 'Decimal
        , low    : Decimal      = 'Decimal
        , mid    : Decimal      = 'Decimal
        , volume : Int          = 'Int
        , stamp  : Date         = 'YYYY-MM-DD }


main
 = do   -- Load some separate files containing stock quotes,
        -- and concatenate them together.
        glob    = concat
                [ read format "test/data/tsv/quotes/ANZ.tsv"
                , read format "test/data/tsv/quotes/CBA.tsv"
                , read format "test/data/tsv/quotes/NAB.tsv"
                , read format "test/data/tsv/quotes/WBC.tsv" ]

        bySym   = glob
                -- Select only the fields that we're interested in.
                & on /row
                $ permute-fields ['symbol, 'date, 'open, 'close, 'volume]

                -- Group quotes by symbol
                & on /row
                $ group 'symbol

                -- Sample for debugging.
--                & on /symbol/row     
--                $ sample 10 


        dView  = d'2015-01-01

        bySym   -- Associate copies of the data with the given date ranges.
                & on /symbol/row     
                $ push-dim 'row 
                        [ { range : Nat  = 7  }
                        , { range : Nat  = 30 }
                        , { range : Nat  = 60 }
                        , { range : Nat  = 90 } ]

                -- Gather the leaves back to top-level so we have a copy of the 
                -- data associated with each range.
                & gather /symbol/row/row

                -- Select just the rows within each date range.
                & on /row
                $ filter-keys 
                  (λk → date-diff k.date dView <= k.range)

                -- Compute value traded for each day from volume and mid price.
                & on /row 
                $ map-keys 
                  (λk → { symbol : Text    = k.symbol
                        , range  : Nat     = k.range
                        , date   : Date    = k.date 
                        , open   : Decimal = k.open
                        , close  : Decimal = k.close
                        , volume : Nat     = k.volume
                        , value  : Decimal = k.volume * (div (k.open + k.close) 2)
                        })

                -- Re-group by symbol.
                & on /row 
                $ group 'symbol

                -- Group by range and sort for presentation.
                & on /symbol/row
                $ group 'range
                @ sortby-field 'range
