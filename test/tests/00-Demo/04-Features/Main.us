

-- Format of quote file.
format
 =      { symbol : Text         = 'Text
        , date   : Date         = 'YYYY-MM-DD
        , open   : Decimal      = 'Decimal
        , close  : Decimal      = 'Decimal
        , high   : Decimal      = 'Decimal
        , low    : Decimal      = 'Decimal
        , mid    : Decimal      = 'Decimal
        , volume : Int          = 'Int
        , stamp  : Date         = 'YYYY-MM-DD }


-- View date for when we compute the features.
dateView  = d'2015-01-01


main
 = do   -- Load some separate files containing stock quotes,
        -- and concatenate them together.
        glob    = concat
                [ read format "test/data/tsv/quotes/ANZ.tsv"
                , read format "test/data/tsv/quotes/CBA.tsv"
                , read format "test/data/tsv/quotes/NAB.tsv"
                , read format "test/data/tsv/quotes/WBC.tsv" ]


        -- Select the fields that were interested in, and group quotes by symbol.
        bySym   = glob
                & on /row
                $ permute-fields ['symbol, 'date, 'open, 'close, 'volume]

                -- Group quotes by symbol
                & on /row       $ group 'symbol


        -- Filter data to select rows for each of the date ranges that we're
        -- interestd in.
        tsRange = bySym
                -- Associate copies of the data with each date range.
                & on /symbol/row     
                $ push-dim 'row 
                        [ { range : Nat  = 7  }
                        , { range : Nat  = 30 }
                        , { range : Nat  = 60 }
                        , { range : Nat  = 90 } ]

                -- Gather the leaves back to top-level so we have a copy of the 
                -- data associated with each range, where the range is relative.
                -- to the view date.
                & gather /symbol/row/row

                -- Filter range groups so we have just the rows within
                -- each date range.
                & on /row
                $ filter-keys 
                  (λk → date-diff k.date dateView <= k.range)

                -- Regroup the data after the filter process.
                -- If we had a better way to broadcast the desired range to
                -- the filter process then we wouldn't need this.
                & on /row        $ group 'symbol
                & on /symbol/row $ group 'range  @ sortby-field 'range


        -- Compute features for each range.
        tsFeatures
                = tsRange
                -- Compute value traded for each day from volume and mid price.
                & on /symbol/range/row
                $ map-keys 
                  (λk → { date   : Date    = k.date 
                        , open   : Decimal = k.open
                        , close  : Decimal = k.close
                        , volume : Nat     = k.volume
                        , value  : Decimal = k.volume * (div (k.open + k.close) 2)
                        })

                -- Sum up the total volume traded for each symbol in each range.
                & on /symbol/range
                $ fold-as-field 'value-total 'row 
                  (λacc → λk → acc + k.value) 0

                -- Get the maximum value traded on any day in the range.
                & on /symbol/range
                $ fold-as-field 'value-max 'row
                  (λacc → λk → if k.value > acc then k.value else acc) 0

                -- Drop the underling quote data now that we're done with it.
                & on /symbol/range $ drop-dim 'row

                -- Normalize features relative to the date ranges.
                & on /symbol/range
                $ map-keys
                  (λk → { range              : Nat     = k.range
                        , value-total        : Decimal = k.value-total
                        , value-total-perday : Decimal = div k.value-total k.range
                        , value-max          : Decimal = k.value-max
                        , value-max-norm     : Decimal = div k.value-max k.value-total  })

        tsFeatures
